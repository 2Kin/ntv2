parameters:
#    ninja_tooken_user.example.class: NinjaTooken\UserBundle\Example

services:
    ninjatooken_user.registration.form.type:
        class: NinjaTooken\UserBundle\Form\Type\RegistrationFormType
        arguments: [%fos_user.model.user.class%]
        tags:
            - { name: form.type, alias: ninjatooken_user_registration }

    ninjatooken_user.resetting.form.type:
        class: NinjaTooken\UserBundle\Form\Type\ResettingFormType
        arguments: [%fos_user.model.user.class%]
        tags:
            - { name: form.type, alias: ninjatooken_user_resetting }

    ninjatooken_user.form.handler.registration:
        class: NinjaTooken\UserBundle\Form\Handler\RegistrationFormHandler
        arguments: ["@fos_user.registration.form", "@request", "@fos_user.user_manager", "@fos_user.mailer", "@fos_user.util.token_generator"]
        scope: request
        public: false

    fos_facebook.user.login:
        class: NinjaTooken\UserBundle\Security\User\Provider\FacebookProvider
        arguments:
            facebook: "@fos_facebook.api"
            userManager: "@fos_user.user_manager"
            validator: "@validator"
            container: "@service_container"

    ninjatooken_user_listener:
        class: NinjaTooken\UserBundle\Listener\LoginListener
        arguments: ['@security.authorization_checker', '@doctrine']
        tags:
            - { name: kernel.event_listener, event: security.interactive_login, method: onSecurityInteractiveLogin }

    security.access.blacklist_voter:
        class:      NinjaTooken\UserBundle\Security\Authorization\Voter\ClientIpVoter
        arguments:  ["@service_container", %banned.ip%]
        public:     false
        tags:
            - { name: security.voter }

    ninjatooken_user.message_user_listener:
        class: NinjaTooken\UserBundle\Listener\MessageUserListener
        arguments:  ["@service_container"]
        tags:
            - { name: doctrine.event_listener, event: postPersist }

    ninjatooken_user.type.ip:
        class: NinjaTooken\UserBundle\Form\Type\IpType
        tags:
            - { name: form.type, alias: ip }

    sonata.user.admin.group:
        class: Sonata\UserBundle\Admin\Entity\GroupAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Group }
        arguments: [null, NinjaTooken\UserBundle\Entity\Group, null]

    sonata.user.admin.ip:
        class: NinjaTooken\UserBundle\Admin\IpAdmin
        tags:
            - {name: sonata.admin, manager_type: orm, group: admin, label: Ip}

        arguments: [~, NinjaTooken\UserBundle\Entity\Ip, SonataAdminBundle:CRUD]